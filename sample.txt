#include <stdio.h>

// CUDA kernel for vector-vector multiplication
__global__ void vectorMultiply(int *a, int *b, int *result, int size) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;

    // Ensure that the thread index is within the array bounds
    if (i < size) {
        result[i] = a[i] * b[i];
    }
}

int main() {
    const int size = 1000;  // Adjust the size of the vectors as needed

    // Host vectors
    int *h_a, *h_b, *h_result;
    h_a = (int *)malloc(size * sizeof(int));
    h_b = (int *)malloc(size * sizeof(int));
    h_result = (int *)malloc(size * sizeof(int));

    // Initialize host vectors
    for (int i = 0; i < size; ++i) {
        h_a[i] = i + 1;
        h_b[i] = 2 * (i + 1);
    }

    // Device vectors
    int *d_a, *d_b, *d_result;
    cudaMalloc((void **)&d_a, size * sizeof(int));
    cudaMalloc((void **)&d_b, size * sizeof(int));
    cudaMalloc((void **)&d_result, size * sizeof(int));

    // Copy host vectors to device
    cudaMemcpy(d_a, h_a, size * sizeof(int), cudaMemcpyHostToDevice);
    cudaMemcpy(d_b, h_b, size * sizeof(int), cudaMemcpyHostToDevice);

    // Set up the execution configuration
    int blockSize = 256;
    int numBlocks = (size + blockSize - 1) / blockSize;

    // Launch the CUDA kernel
    vectorMultiply<<<numBlocks, blockSize>>>(d_a, d_b, d_result, size);

    // Copy the result back to the host
    cudaMemcpy(h_result, d_result, size * sizeof(int), cudaMemcpyDeviceToHost);

    // Print the result
    printf("Result:\n");
    for (int i = 0; i < size; ++i) {
        printf("%d * %d = %d\n", h_a[i], h_b[i], h_result[i]);
    }

    // Clean up
    free(h_a);
    free(h_b);
    free(h_result);
    cudaFree(d_a);
    cudaFree(d_b);
    cudaFree(d_result);

    return 0;
}





















#include <stdio.h>
#include <omp.h>

// Function to find GCD using Euclidean Algorithm
int gcd(int a, int b) {
    while (b != 0) {
        int temp = b;
        b = a % b;
        a = temp;
    }
    return a;
}

// Function to find LCM using GCD
int lcm(int a, int b) {
    return (a * b) / gcd(a, b);
}

int main() {
    int num1 = 24;
    int num2 = 36;

    int result_gcd, result_lcm;

    #pragma omp parallel sections
    {
        #pragma omp section
        {
            result_gcd = gcd(num1, num2);
            #pragma omp critical
            printf("GCD of %d and %d is: %d\n", num1, num2, result_gcd);
        }

        #pragma omp section
        {
            result_lcm = lcm(num1, num2);
            #pragma omp critical
            printf("LCM of %d and %d is: %d\n", num1, num2, result_lcm);
        }
    }

    return 0;
}
